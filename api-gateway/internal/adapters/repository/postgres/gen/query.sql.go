// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.23.0
// source: query.sql

package postgres

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createNote = `-- name: CreateNote :one
INSERT INTO Notes (uuid, title, content, created_by)
VALUES ($1, $2, $3, $4)
RETURNING uuid, title, content, created_by
`

type CreateNoteParams struct {
	Uuid      string
	Title     string
	Content   string
	CreatedBy pgtype.Text
}

func (q *Queries) CreateNote(ctx context.Context, arg CreateNoteParams) (Note, error) {
	row := q.db.QueryRow(ctx, createNote,
		arg.Uuid,
		arg.Title,
		arg.Content,
		arg.CreatedBy,
	)
	var i Note
	err := row.Scan(
		&i.Uuid,
		&i.Title,
		&i.Content,
		&i.CreatedBy,
	)
	return i, err
}

const createUser = `-- name: CreateUser :one
INSERT INTO Users (uuid, email, password, auth_token)
VALUES ($1, $2, $3, $4)
RETURNING uuid, email, password, auth_token
`

type CreateUserParams struct {
	Uuid      string
	Email     string
	Password  string
	AuthToken string
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.db.QueryRow(ctx, createUser,
		arg.Uuid,
		arg.Email,
		arg.Password,
		arg.AuthToken,
	)
	var i User
	err := row.Scan(
		&i.Uuid,
		&i.Email,
		&i.Password,
		&i.AuthToken,
	)
	return i, err
}

const getAllNotes = `-- name: GetAllNotes :many
SELECT uuid, title, content, created_by
FROM Notes
`

func (q *Queries) GetAllNotes(ctx context.Context) ([]Note, error) {
	rows, err := q.db.Query(ctx, getAllNotes)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Note
	for rows.Next() {
		var i Note
		if err := rows.Scan(
			&i.Uuid,
			&i.Title,
			&i.Content,
			&i.CreatedBy,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getUser = `-- name: GetUser :one
SELECT uuid, email, password, auth_token
FROM Users
WHERE email = $1
`

func (q *Queries) GetUser(ctx context.Context, email string) (User, error) {
	row := q.db.QueryRow(ctx, getUser, email)
	var i User
	err := row.Scan(
		&i.Uuid,
		&i.Email,
		&i.Password,
		&i.AuthToken,
	)
	return i, err
}

const getUserFromAuthToken = `-- name: GetUserFromAuthToken :one
SELECT uuid, email, password, auth_token
FROM Users
WHERE auth_token = $1
`

func (q *Queries) GetUserFromAuthToken(ctx context.Context, authToken string) (User, error) {
	row := q.db.QueryRow(ctx, getUserFromAuthToken, authToken)
	var i User
	err := row.Scan(
		&i.Uuid,
		&i.Email,
		&i.Password,
		&i.AuthToken,
	)
	return i, err
}

const getUserPermissions = `-- name: GetUserPermissions :many
SELECT action FROM Permissions p
JOIN UserPermissions up ON p.uuid = up.permission_uuid
WHERE up.user_uuid = $1 AND p.service = $2 AND p.resource = $3
`

type GetUserPermissionsParams struct {
	UserUuid string
	Service  string
	Resource string
}

func (q *Queries) GetUserPermissions(ctx context.Context, arg GetUserPermissionsParams) ([]string, error) {
	rows, err := q.db.Query(ctx, getUserPermissions, arg.UserUuid, arg.Service, arg.Resource)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []string
	for rows.Next() {
		var action string
		if err := rows.Scan(&action); err != nil {
			return nil, err
		}
		items = append(items, action)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
