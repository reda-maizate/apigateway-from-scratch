// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.23.0
// source: notes.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createNote = `-- name: CreateNote :one
INSERT INTO Notes (uuid, title, content, created_by)
VALUES ($1, $2, $3, $4)
RETURNING uuid, title, content, created_by
`

type CreateNoteParams struct {
	Uuid      string
	Title     string
	Content   string
	CreatedBy pgtype.Text
}

func (q *Queries) CreateNote(ctx context.Context, arg CreateNoteParams) (Note, error) {
	row := q.db.QueryRow(ctx, createNote,
		arg.Uuid,
		arg.Title,
		arg.Content,
		arg.CreatedBy,
	)
	var i Note
	err := row.Scan(
		&i.Uuid,
		&i.Title,
		&i.Content,
		&i.CreatedBy,
	)
	return i, err
}

const getAllNotes = `-- name: GetAllNotes :many
SELECT uuid, title, content, created_by
FROM Notes
`

func (q *Queries) GetAllNotes(ctx context.Context) ([]Note, error) {
	rows, err := q.db.Query(ctx, getAllNotes)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Note
	for rows.Next() {
		var i Note
		if err := rows.Scan(
			&i.Uuid,
			&i.Title,
			&i.Content,
			&i.CreatedBy,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
