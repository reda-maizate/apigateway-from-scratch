// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.23.0
// source: users.sql

package db

import (
	"context"
)

const createUser = `-- name: CreateUser :one
INSERT INTO Users (uuid, email, password, auth_token)
VALUES ($1, $2, $3, $4)
RETURNING uuid, email, password, auth_token
`

type CreateUserParams struct {
	Uuid      string
	Email     string
	Password  string
	AuthToken string
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.db.QueryRow(ctx, createUser,
		arg.Uuid,
		arg.Email,
		arg.Password,
		arg.AuthToken,
	)
	var i User
	err := row.Scan(
		&i.Uuid,
		&i.Email,
		&i.Password,
		&i.AuthToken,
	)
	return i, err
}

const getUser = `-- name: GetUser :one
SELECT uuid, email, password, auth_token
FROM Users
WHERE email = $1
`

func (q *Queries) GetUser(ctx context.Context, email string) (User, error) {
	row := q.db.QueryRow(ctx, getUser, email)
	var i User
	err := row.Scan(
		&i.Uuid,
		&i.Email,
		&i.Password,
		&i.AuthToken,
	)
	return i, err
}

const getUserFromAuthToken = `-- name: GetUserFromAuthToken :one
SELECT uuid, email, password, auth_token
FROM Users
WHERE auth_token = $1
`

func (q *Queries) GetUserFromAuthToken(ctx context.Context, authToken string) (User, error) {
	row := q.db.QueryRow(ctx, getUserFromAuthToken, authToken)
	var i User
	err := row.Scan(
		&i.Uuid,
		&i.Email,
		&i.Password,
		&i.AuthToken,
	)
	return i, err
}
